package com.qaprosoft.argon.dbaccess.dao;

import com.qaprosoft.argon.dbaccess.dao.mysql.ResetPasswordDAO;
import com.qaprosoft.argon.dbaccess.dao.mysql.StatusDAO;
import com.qaprosoft.argon.dbaccess.dao.mysql.UserDAO;
import com.qaprosoft.argon.dbaccess.utils.KeyGenerator;
import com.qaprosoft.argon.models.db.Confirmation;
import com.qaprosoft.argon.models.db.ResetPassword;
import com.qaprosoft.argon.models.db.Status;
import com.qaprosoft.argon.models.db.User;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.util.Date;

import static org.testng.Assert.*;

/**
 * @author kbugrim
 * @since 09 Jan 2018
 */
@Test
@ContextConfiguration("classpath:com/qaprosoft/argon/dbaccess/dbaccess-test.xml")
public class ResetPasswordDAOTest extends AbstractTestNGSpringContextTests
{

	private static final boolean ENABLED = true;

	@Autowired
	private ResetPasswordDAO resetPasswordDAO;

	@Autowired
	private UserDAO userDAO;

	@Autowired
	private StatusDAO statusDAO;

	private static final User USER = new User();
	{
		USER.setEnabled(true);
		USER.setEmail(KeyGenerator.getKey() + "@test-mail.com");
		USER.setDob(new Date());
		USER.setFirstName("Boris");
		USER.setLastName("The Blade");
		USER.setPassword("pass" + KeyGenerator.getKey().toString());
		USER.setDob(DateTime.now().withTime(0, 0, 0, 0).minusYears(18).toDate());
		USER.setUsername("user" + KeyGenerator.getKey());
		USER.setVerified(true);
	}

	private static final Status STATUS = new Status();

	private static final ResetPassword RESET_PASSWORD = new ResetPassword();
	{
		RESET_PASSWORD.setToken("token" + KeyGenerator.getKey().toString());
		RESET_PASSWORD.setNewPassword("new_password" + KeyGenerator.getKey().toString());
	}

	@BeforeClass
	public void init()
	{
		USER.setStatus(statusDAO.getStatusByType(Status.Type.OFFLINE));
		userDAO.createUser(USER);
		RESET_PASSWORD.setUserId(USER.getId());
	}

	@AfterClass
	public void delete()
	{
		userDAO.deleteUserById(USER.getId());
	}

	@Test(enabled = ENABLED)
	public void createResetPassword()
	{
		resetPasswordDAO.createResetPassword(RESET_PASSWORD);
		assertNotEquals(RESET_PASSWORD.getId(), 0, "ResetPassword ID must be set up by autogenerated keys.");
	}

	@Test(enabled = ENABLED, dependsOnMethods = {"createResetPassword"})
	public void getResetPasswordById()
	{
		checkResetPassword(resetPasswordDAO.getResetPasswordById(RESET_PASSWORD.getId()));
	}

	@Test(enabled = ENABLED, dependsOnMethods ={"createResetPassword", "createResetPassword"})
	public void updateResetPassword()
	{
		RESET_PASSWORD.setToken("new_token" + KeyGenerator.getKey().toString());
		resetPasswordDAO.updateResetPassword(RESET_PASSWORD);
		checkResetPassword(resetPasswordDAO.getResetPasswordById(RESET_PASSWORD.getId()));
	}

	@Test(enabled = ENABLED , dependsOnMethods =
	{ "createResetPassword","createResetPassword", "updateResetPassword" })
	public void deleteResetPasswordById()
	{
		resetPasswordDAO.deleteResetPasswordById(RESET_PASSWORD.getId());
		assertNull(resetPasswordDAO.getResetPasswordById(RESET_PASSWORD.getId()));
	}


	private void checkResetPassword(ResetPassword resetPassword)
	{
		assertEquals(resetPassword.getToken(), RESET_PASSWORD.getToken(), "ResetPassword token is not as expected.");
		assertEquals(resetPassword.getNewPassword(), RESET_PASSWORD.getNewPassword(), "ResetPassword new password is not as expected.");
	}
}
